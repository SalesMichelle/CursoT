    Etapa 1:
- Comando no terminal: dotnet new webapi -n CadastroProdutos
- Cria seguinte estrutura:
CadastroProdutos/
│
├── Controllers/
│   └── WeatherForecastController.cs   --> Exemplo de controller com endpoint GET
│
├── Properties/
│   └── launchSettings.json            --> Configurações de execução do projeto (porta, perfil etc.)
│
├── appsettings.json                   --> Configurações gerais (ex: connection strings, chaves, etc.)
├── Program.cs                         --> Arquivo principal de entrada, configura serviços e middlewares
├── WeatherForecast.cs                 --> Modelo usado pelo exemplo inicial (pode ser apagado depois)
├── CadastroProdutos.csproj            --> Arquivo de configuração do projeto (.NET SDK, pacotes etc.)

_____________________________________________________________________________________________________________

    Etapa 2:
- CadastroProdutos/
│
├── Controllers/            // Responsáveis por receber as requisições HTTP (como GET e POST) e chamar os serviços para processar os dados.
├── Services/               // Onde fica a lógica de negócio. Essa camada recebe dados do controller, aplica as regras (como validação) e interage com o repositório.
├── Models/                 // São as entidades principais do sistema, ou seja, as representações do que você está lidando — neste caso, o Produto.
├── Repositories/           // Responsáveis por armazenar e recuperar dados. No nosso exercício, será um repositório "in memory", ou seja, sem banco de dados.
├── DTOs/                   // Servem para transferir dados entre camadas sem expor diretamente os Models.

- mkdir Controllers Services Models Repositories DTOs   // Comando para criar as pastas

_____________________________________________________________________________________________________________

    Etapa 3
- Criação da classe em C:\Users\miche\Downloads\ArquiteturaEmCamadasAulaExerc\CadastroProdutos\Models\Produto.cs

_____________________________________________________________________________________________________________

    Etapa 4
- Representa os dados de entrada ou saída da API.
- Contém apenas dados (sem lógica de negócio).
- Não precisa de Id para criar/receber dados.
- C:\Users\miche\Downloads\ArquiteturaEmCamadasAulaExerc\CadastroProdutos\DTOs\ProdutoDto.cs

_____________________________________________________________________________________________________________

    Etapa 5
- Criação da Interface
- define um conjunto de métodos que uma classe precisa implementar, mas não define como esses métodos serão executados;
- a interface IProdutoRepository define dois métodos: Adicionar e ListarTodos, mas não se preocupa com a forma como esses métodos vão funcionar internamente.
- C:\Users\miche\Downloads\ArquiteturaEmCamadasAulaExerc\CadastroProdutos\Repositories\IProdutoRepository.cs

_____________________________________________________________________________________________________________

    Etapa 6
- Crie a classe ProdutoRepositoryInMemory na pasta Repositories.
- Implemente a interface IProdutoRepository.
- Armazene os produtos em uma lista interna na memória.
- C:\Users\miche\Downloads\ArquiteturaEmCamadasAulaExerc\CadastroProdutos\Repositories\ProdutoRepositoryInMemory.cs

_____________________________________________________________________________________________________________

    Etapa 7
- Crie a classe ProdutoService dentro da pasta Services.
- No construtor, injete a dependência IProdutoRepository.
- Implemente os seguintes métodos:
    - AdicionarProduto(ProdutoDto dto) (instancia um Produto e chama o repositório).
    - ListarProdutos() (retorna a lista de Produtos do repositório).